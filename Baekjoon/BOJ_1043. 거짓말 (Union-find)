/* * Union-Find 알고리즘 
 *   서로소 집합(Dis) 알고리즘
 *   여러 개의 노드가 존재할 때 두 개의 노드를 선택해서, 현재 이 노드가 같은 그래프에 속하는지 판별하는 알고리즘
*/

import java.util.*;
import java.io.*;

public class Main {
	private static int[] group;
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		
		group = new int[n + 1];
		for (int i = 0 ; i < n+1; i++) {
			group[i] = i;
		}
		
		st = new StringTokenizer(br.readLine());
		int tNum = Integer.parseInt(st.nextToken());
		
		// 진실을 아는 사람이 없는 경우
		if(tNum == 0) {
			System.out.println(m);
			return;
		}
		
		// 진실을 아는 사람이 있는 경우
		int truth = Integer.parseInt(st.nextToken());
		for (int i = 1; i < tNum; i++) {
			union(truth, Integer.parseInt(st.nextToken()));
		}
		
		List<int[]> party = new ArrayList<>();
		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			
			int pNum = Integer.parseInt(st.nextToken());
			int[] tmp = new int[pNum];

			int first = Integer.parseInt(st.nextToken());
			tmp[0] = first;
			for (int j = 1; j < pNum; j++) {
				int second = Integer.parseInt(st.nextToken());
				tmp[j] = second;
				
				union(first, second);
				
			}
			
			party.add(tmp);
		}
		
		int cnt = m;
		for (int[] p : party) {
			
			for (int x : p) {
				if (find(x) == find(truth)) {
					cnt--; 
					break;
				}
			}
		}
		
		System.out.println(cnt);
	}
	
	
	public static void union(int x, int y) {
		x = find(x);
		y = find(y);
		
		if(x != y) {
			group[y] = x;
		}
	}
	
	
	public static int find(int x) {
		if (group[x] == x) {
			return x;
			
		} else {
			return group[x] = find(group[x]);		// 경로 압축
		}
	}
}
