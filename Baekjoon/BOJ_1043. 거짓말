import java.util.*;
import java.io.*;

public class Boj {
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		
		st = new StringTokenizer(br.readLine());
		int t = Integer.parseInt(st.nextToken());
		boolean[] truth = new boolean[n + 1];
		Deque<Integer> dq = new ArrayDeque<>();
		if (t == 0) {
			System.out.print(m);
			return;
			
		} else {
			while (st.hasMoreTokens()) {
				int person = Integer.parseInt(st.nextToken());
				truth[person] = true;
				dq.addLast(person);
			}
		}
		
		int[][] party = new int[m][n+1];
		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			int attend = Integer.parseInt(st.nextToken());
			for (int j = 0; j < attend; j++) {
				int p = Integer.parseInt(st.nextToken());
				party[i][p] = 1;
			}
		}
		
		boolean[] lie = new boolean[m];
		Arrays.fill(lie, true);
		while (!dq.isEmpty()) {
			int know = dq.pollFirst();
			
			for(int i = 0; i < m; i++) {
				if(party[i][know] == 1) {
					lie[i] = false;
					
					for(int j = 1; j < n+1; j++) {
						if (!truth[j] && party[i][j] == 1) {
							truth[j] = true;
							dq.addLast(j);
						}
					}
				}
			}
		}
		
		int cnt = 0;
		for(int i = 0; i < m; i++) {
			if(lie[i]) cnt++; 
		}
		
		System.out.println(cnt);
	}
}
